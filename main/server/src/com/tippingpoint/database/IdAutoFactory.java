package com.tippingpoint.database;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;

/**
 * This class represents an ID in the database that is an auto-incrementing value from the DB.
 */
public class IdAutoFactory implements IdFactory {
	/**
	 * This method returns the database type for references.
	 */
	@Override
	public String getDatabaseReferenceType() {
		return "INTEGER";
	}

	/**
	 * This method returns the JDBC type associate with the type of ID generated.
	 */
	@Override
	public int getJdbcType() {
		return Types.INTEGER;
	}

	/**
	 * This method returns the length of the column needed to store the id.
	 */
	public int getLength() {
		return -1;
	}

	/**
	 * This method returns a new value for the ID.
	 */
	public Id getNewValue() {
		throw new IllegalStateException("New values are generated from the database.");
	}

	/**
	 * This method returns the value from the result set as an ID.
	 * 
	 * @param rs Result set containing the results.
	 * @param intIndex Integer corresponding to the index of the column in the result set.
	 * @throws SQLException
	 */
	public Id getValue(final ResultSet rs, final Integer intIndex) throws SQLException {
		Id id = null;
		final int nId = rs.getInt(intIndex);

		if (!rs.wasNull()) {
			id = new Id(nId);
		}

		return id;
	}

	/**
	 * This method is used to indicate that a length is associated with this column type.
	 */
	public boolean hasLength() {
		return false;
	}

	/**
	 * This method returns if the value is derived based on the database.
	 */
	public boolean idDerived() {
		return true;
	}

	/**
	 * This method returns if the type dictates if the value is required when the column is required. Values not
	 * required when the column type indicates that the column is specified are values generated by the database (i.e.
	 * auto increment id columns).
	 */
	public boolean isValueRequired(final boolean bColumnRequired) {
		// id columns are required in the database, but not necessarily in the statements
		return false;
	}
}
